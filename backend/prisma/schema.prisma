generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  image         String?
  email         String         @unique
  items         Item[]
  skills        Skill[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  clerkId       String?        @unique

  proposedSwaps SwapRequest[] @relation("ProposedSwaps")
  receivedSwaps SwapRequest[] @relation("ReceivedSwaps")
}

model Item {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  title           String
  image           String
  price           Float         @default(1)
  category        ItemCategory
  condition       ItemCondition
  hasBill         Boolean       @default(false)
  isSwapped       Boolean       @default(false)
  lookingFor      String
  location        String
  proposedInSwaps SwapRequest[] @relation("ProposerItem")
  receivedInSwaps SwapRequest[] @relation("ReceiverItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id              Int           @id @default(autoincrement())
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  image           String
  title           String
  category        SkillCategory
  location        String?
  isRemote        Boolean
  lookingFor      String
  duration        Int           @default(0)
  proposedInSwaps SwapRequest[] @relation("ProposerSkill")
  receivedInSwaps SwapRequest[] @relation("ReceiverSkill")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SwapRequest {
  id         Int  @id @default(autoincrement())
  proposerId Int
  proposer   User @relation("ProposedSwaps", fields: [proposerId], references: [id])

  receiverId     Int
  receiver       User  @relation("ReceivedSwaps", fields: [receiverId], references: [id])
  proposerItemId Int?
  proposerItem   Item? @relation("ProposerItem", fields: [proposerItemId], references: [id])

  proposerSkillId Int?
  proposerSkill   Skill?       @relation("ProposerSkill", fields: [proposerSkillId], references: [id])
  proposerType    ProposerType
  receiverItemId  Int?
  receiverItem    Item?        @relation("ReceiverItem", fields: [receiverItemId], references: [id])

  receiverSkillId Int?
  receiverSkill   Skill?       @relation("ReceiverSkill", fields: [receiverSkillId], references: [id])
  receiverType    ReceiverType
  status          SwapStatus   @default(PENDING)
  meeting         SwapMeeting?
}

model SwapMeeting {
  id        Int           @id @default(autoincrement())
  swapId    Int           @unique
  swap      SwapRequest   @relation(fields: [swapId], references: [id])
  type      MeetingType
  location  String?
  meetingLink String?
  date      DateTime
  status    MeetingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Notification {
  id        Int                   @id @default(autoincrement())
  userId    Int
  user      User                  @relation(fields: [userId], references: [id])
  title     String
  body      String
  createdAt DateTime              @default(now())
  link      String?
  type      String
  category  NotificationCategory?
}

enum NotificationCategory {
  SWAP
  MEETING
}

enum MeetingType {
  ONLINE
  INPERSON
}

enum MeetingStatus {
  CONFIRMED
  PENDING
}

enum ProposerType {
  ITEM
  SKILL
}

enum ReceiverType {
  ITEM
  SKILL
}

enum ItemCategory {
  ELECTRONICS
  CLOTHING
  BOOKS
  FURNITURE
  TOYS
  FOOTWEAR
  BEAUTY
  STATIONERY
  OTHER
}

enum SkillCategory {
  TECH
  MUSIC
  ART
  TUTORING
  COOKING
  FITNESS
  DIY
  OTHER
}

enum ItemCondition {
  NEW
  LIKE_NEW
  USED
  DAMAGED
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}
